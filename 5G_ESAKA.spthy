theory 5G_ESAKA
begin

builtins: 
     asymmetric-encryption,multiset,xor
functions: 
      f1/2,
      f2/2,
      f3/2,
      f4/2,
      f5/2,
      f1_star/2,
      f5_star/2,
      KDF/2,
      SHA256/2
tactic: injectiveagreement_ue_hss_kseaf
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!KU\( ~sk_HN.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( f3\(~k,.*"
    regex ".*!KU\( f5\(~k,.*"
prio:
    regex ".*St_3_SEAF\(.*"
prio:
    regex ".*!KU\( KDF\(KDF\(<f3\(~k,.*"
    regex ".*!KU\( KDF\(<f3\(~k,.*~sqn_root.*"
prio:
    regex ".*RcvS\(.*\'aia\'.*"
prio:
    regex ".*Commit\(.*"
prio:
    regex ".*RcvS\(.*"
prio:
    regex ".*!KU\( SHA256\(.*"
    regex ".*!KU\( KDF\(<f3\(~k, .*"
          
tactic: injectiveagreement_seaf_ue_kseaf
presort: C
prio:
         regex "!KU\( ~k"
prio:
    regex "!KU\( ~sk_HN"
prio:
    regex "!HSS\("
prio:
    regex "!KU\( f3\(~k,"
    regex "RcvS\( ~k,.*'air'"
    regex "RcvS\( ~sqn_root"
    regex "RcvS\( ~sk_HN"
    regex "RcvS\( ~supi"
prio:
    regex "Commit\("
prio:
    regex "St_3_SEAF\("
    regex "St_4_SEAF\("
prio:
    regex "!KU\( KDF\(<f3\("
    regex "!KU\( KDF\(KDF\(<"
    regex "!KU\( f3\("
prio:
    regex "RcvS\(.*<'aia'.*SHA"
prio:
    regex "RcvS\(.*<'aca'"
prio:
    regex "RcvS\(.*<'ac'"
prio:
    regex "RcvS\(.*<'aia'"
prio:
    regex "!KU\( f1\("

tactic: noninjectiveagreement_weakagreement_seaf_ue
presort: C
prio:
	regex "!KU\( ~k"
prio:
    regex "!KU\( ~sk_HN"
prio:
    regex "!HSS\("
prio:
    regex "!KU\( f3\(~k,"
    regex "RcvS\( ~k,"
    regex "RcvS\( ~sqn_root"
    regex "RcvS\( ~sk_HN"
    regex "RcvS\( ~supi"
prio:
   regex "!KU\( f5\(" | regex "!KU\( f5_star\(" 
prio:
    regex "~~"
    regex "=.*=.*=."
prio:
    regex "Commit\("
    regex "St_3_SEAF\("
    regex "St_4_SEAF\("
prio:
    regex "RcvS\(.*<'aca'"
prio:
    regex "RcvS\(.*<'ac'"
prio:
    regex "!KU\( KDF\(<f3\("
    regex "!KU\( KDF\(KDF\(<"
prio:
    regex "!KU\( f3\("
prio:
    regex "RcvS\(.*<'aia'"
prio:
    regex "RcvS\(.*<'air'"
prio:
    regex "!KU\( \(f5\(~k"
    regex "!KD\( \(f5\(~k"
prio:
    regex "!KU\( aenc\("
prio:
    regex "!KU\( pk\("
prio:
    regex "!KU\( ~supi"
prio:
    regex "!KU\( f1\(~"
prio:
    regex "!KU\( f1\(K"      
    
tactic: noninjectiveagreement_ue_hss
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!KU\( ~sk_HN.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( f5\(.*" | regex ".*!KU\( f5_star\(.*"
prio:
    regex ".*!KU\( ~sqn_root.*"
prio:
    regex ".*St_1_UE\(.*"
    regex ".*St_1_SEAF\(.*"
prio:
    regex ".*!KU\( f1\(.*"
prio:
    regex ".*~~>.*"
prio:
    regex ".*RcvS\(.*"
prio:
    regex ".*!KU\( \(f5\(.*" | regex ".*!KD\( \(f5\(.*"
prio:
    regex ".*!KU\( ~supi.*"
prio:
    regex ".*!KU\( aenc\(.*"   
    
tactic: injectiveagreement_hss_ue_kseaf
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( ~sk.*"
prio:
    regex ".*!KU\( f2\(.*"
prio:
    regex ".*Commit\(.*"
    regex ".*St_1_UE\(.*"
    regex ".*St_1_HSS\(.*"
prio:
    regex ".*!KU\( f1\(.*"
prio:
    regex ".*!KU\( KDF\(<f3.*"
prio:
    regex ".*RcvS\(.*<\'ac\'.*"

tactic: noninjectiveagreement_hss_ue_SNID
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( ~sk.*"
prio:
    regex ".*!KU\( f2\(.*"
    regex ".*!KU\( f3\(.*"
    regex ".*!KU\( f4\(.*"
    regex ".*!KU\( f5\(.*"
prio:
    regex ".*Commit\(.*"
    regex ".*St_1_HSS\(.*"
prio:
    regex ".*!KU\( KDF\(<f3\(.*"
prio:
    regex ".*RcvS\(.*\'ac\'.*"
prio:
    regex ".*RcvS\(.*\'aia\'.*"
prio:
    regex ".*RcvS\(.*\'air\'.*"
prio:
    regex ".*!KU\( ~supi.*"
prio:
    regex ".*!KU\( aenc\(.*"

tactic: noninjectiveagreement_hss_seaf_supi
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( ~sk.*"
prio:
    regex ".*!KU\( f2\(.*"
    regex ".*!KU\( f3\(.*"
    regex ".*!KU\( f4\(.*"
    regex ".*!KU\( f5\(.*"
prio:
    regex ".*St_1_SEAF\(.*"
    regex ".*Sec\( .*"
prio:
    regex ".*~~>.*"
prio:
    regex ".*Commit\(.*"
    regex ".*St_1_HSS\(.*"
prio:
    regex ".*!KU\( KDF\(<f3\(.*"
prio:
    regex ".*!KU\( f1\(~k.*"
prio:
    regex ".*!KU\( \(f5\(~k.*"
    regex ".*!KD\( \(f5\(~k.*"
prio:
    regex ".*RcvS\(.*\'ac\'.*"
prio:
    regex ".*RcvS\(.*\'aia\'.*"
prio:
    regex ".*RcvS\(.*\'air\'.*"
prio:
    regex ".*!KU\( ~supi.*"
prio:
    regex ".*!KU\( aenc\(.*"

tactic: src_source
presort: C
prio:
      regex ".*last.*"
prio:
      regex ".*St_1.*"
prio:
      regex ".*RcvS.*"

    

tactic: weakagreement_injectiveagreement_hss_seaf
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( ~sk.*"
prio:
    regex ".*!KU\( f2\(.*"
    regex ".*!KU\( f3\(.*"
    regex ".*!KU\( f4\(.*"
    regex ".*!KU\( f5\(.*"
prio:
    regex ".*St_1_SEAF\(.*"
    regex ".*Sec\( .*"
prio:
    regex ".*~~>.*"
prio:
    regex ".*Commit\(.*"
    regex ".*St_1_HSS\(.*"
prio:
    regex ".*!KU\( KDF\(<f3\(.*"
prio:
    regex ".*!KU\( f1\(~k.*"
prio:
    regex ".*!KU\( \(f5\(~k.*"
    regex ".*!KD\( \(f5\(~k.*"
prio:
    regex ".*RcvS\(.*\'ac\'.*"
prio:
    regex ".*RcvS\(.*\'aia\'.*"
prio:
    regex ".*RcvS\(.*\'air\'.*"
prio:
    regex ".*!KU\( ~supi.*"
prio:
    regex ".*!KU\( aenc\(.*" 

tactic: weakagreement_ue_seaf_noRev
presort: C
prio: 
    regex "!KU\( ~k"
prio:
    regex "!HSS\("
prio:
    regex "!KU\( f5\(" | regex "!KU\( f5_star\("
prio:
    regex "St_1_UE\(" | regex "St_2_UE\(" | regex "St_3_SEAF\(" | regex "Sqn_UE\("
prio:
    regex "~~>"
prio:
    regex "RcvS\( ~idSN"
prio:
    regex "RcvS\("
prio:
    regex "!KU\( \(f5\(" | regex "!KD\( \(f5\("
prio:
    regex "!Ltk_Sym\("
prio:
    regex "!KU\( f4\("
prio:
    regex "St_2_SEAF\(" | regex "St_1_HSS\("
prio:
    regex "!KU\( KDF\("
prio:
    regex "!KU\( ~RAN"
prio:
    regex "!KU\( ~sup"
prio:
    regex "!KU\( f1\("
prio:
    regex "!KU\( aenc\("
prio:
    regex "!KU\( ~sup"
prio:
    regex "!KU\( ~sk"    
tactic: secrecy_seaf_kseaf
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!KU\(f5.*"
prio:
    regex ".*!KU\(f1.*"
prio:
    regex ".*!KU\(KDF.*"
tactic: secrecy_kseaf
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( ~sk.*"
prio:
    regex ".*!KU\( f2\(.*"
    regex ".*!KU\( f3\(.*"
    regex ".*!KU\( f4\(.*"
    regex ".*!KU\( f5\(.*"
    regex ".*!KU\( f5_star\(.*"
    regex ".*~~>*"
prio:
    regex ".*St_.*\(.*"
prio:
    regex ".*!KU\( KDF\(.*"
prio:
    regex ".*RcvS\(.*"
prio:
    regex ".*!KU\( f1\(.*"
prio:
    regex ".*!KU\( \(f5\(.*" | regex ".*!KD\( \(f5\(.*"
prio:
    regex ".*!KU\( aenc\(.*"
prio:
    regex ".*!KU\( pk\(.*"
prio:
    regex ".*!KU\( ~supi.*"  
tactic: weakagreement_ue_seaf_keyConf_noRev
presort: C
prio:
    regex ".*!KU\( ~k.*"
prio:
    regex ".*!HSS\(.*"
prio:
    regex ".*!KU\( f5\(.*" | regex ".*!KU\( f5_star\(.*"
prio:
    regex ".*St_2_UE\(.*"
prio:
    regex ".*!KU\( KDF\(<f3\(.*"
    regex ".*!KU\( KDF\(KDF\(<f3\(.*"
    regex ".*!KU\( f1\(KDF\(KDF\(<f3\(~k.*"
    regex ".*!KU\( f3\(~k*"
prio:
    regex ".*St_1_UE\(.*"
    regex ".*St_1_SEAF\(.*"
    regex ".*St_3_SEAF\(.*"
prio:
    regex ".*~~>.*"
prio:
    regex ".*RcvS\( ~idSN.*"
prio:
    regex ".*RcvS\(.*"
prio:
    regex ".*!KU\( \(f5\(.*" | regex ".*!KD\( \(f5\(.*"
prio:
    regex ".*!Ltk_Sym\(.*"
prio:
    regex ".*!KU\( f4\(.*"
prio:
    regex ".*St_2_SEAF\(.*"
    regex ".*St_1_HSS\(.*"
prio:
    regex ".*!KU\( KDF\(.*"
prio:
    regex ".*!KU\( ~sup.*"
prio:
    regex ".*!KU\( f1\(.*"
prio:
    regex ".*!KU\( aenc\(.*"
prio:
    regex ".*!KU\( ~sup.*"
prio:
    regex ".*!KU\( ~sk.*"  
 
/*****************************/
/* Channel:SEAF <-> HSS   */
/*****************************/
rule send_secure:
       [SndS(~cid,A,B,m)]
       -->
       [Sec(~cid,A,B,m)]

rule receive_secure:
       [Sec(~cid,A,B,m)]
       -->
       [RcvS(~cid,A,B,m)]
/****************************/
/*    Initialization Rules      */
/****************************/

//Initialize a serving network
rule init_servNet:
    let
         SNID=<'5G',~idSN>
    in     
    [Fr(~idSN)]
    --[ServNet(~idSN)]->
    [!SEAF(~idSN,SNID),Out(SNID)]

//Initialize the homeNet
rule init_homeNet:
    [Fr(~idHN),Fr(~sk_HN)]
    --[HomeNet(~idHN)]->
    [!HSS(~idHN,~sk_HN),
    !Pk(~idHN,pk(~sk_HN)),
    Out(<~idHN,pk(~sk_HN)>)]

//Initialize the subscription
rule add_subscription:
    [Fr(~supi),
    Fr(~k),
    !HSS(~idHN,~sk_HN)]
    --[
        Subscribe(~supi,~idHN)
    ]->
    [!Ltk_Sym(~supi,~idHN,~k)]       	
/****************************/
/*     Protocol Rules       */
/****************************/


rule ue_send_attachReq:
let 
    suci=<aenc{<~supi,~RAND>}pk_HN,~idHN>
    msg=<suci,~N>
in
    [!Ltk_Sym(~supi,~idHN,~k),
    !Pk(~idHN,pk_HN),
    Fr(~RAND),
    Fr(~N),
    Fr(~tid)]
    --[
    Start_UE_Session(~supi)
    ]->
    [St_1_UE(~tid,~supi,~idHN,~k,~N),
    Out(msg)]   


rule seaf_receive_attachReq_send_air:
let
     conc_suci=<conc_supi,idHN>
     msgIn=<conc_suci,~N>
     msg=<msgIn,SNID>
in
    [!SEAF(~idSN,SNID),
    Fr(~tid),
    Fr(~cid),
    In(msgIn)]
    --[
      Start_SEAF_Session(~idSN)
    ]->
    [St_1_SEAF(~tid,~idSN,SNID,idHN,~N,~cid),
    SndS(~cid,~idSN,idHN,<'air',msg>)]


rule hss_receive_air_send_aia:
let
//1.Receive
    conc_supi=aenc{<~supi,~RAND>}pk(~sk_HN)
    suci=<conc_supi,~idHN>
    conc_suci=<suci,N>
    SNID=<'5G',idSN>
    msgIn=<conc_suci,SNID>
//2.Send
    HNMAC=f1(~k,~R)
    AK=f5(~k,~R)
    AUTN=HNMAC XOR AK
        
    XRES = f2(~k, ~R)
    CK = f3(~k, ~R)
    IK = f4(~k, ~R)
    K_seaf = KDF(KDF(<CK, IK>, <SNID,AK>), SNID)
    
    XRES_star = KDF(<CK, IK>, <SNID, XRES, ~R>)
    HXRES_star = SHA256(XRES_star, ~R)
    


    5G_AV=<~R,HNMAC,AUTN,HXRES_star>
    msgOut=5G_AV
in
    [!HSS(~idHN,~sk_HN),
    RcvS(~cid,idSN,~idHN,<'air',msgIn>),
    !Ltk_Sym(~supi,~idHN,~k),
    Fr(~R),
    Fr(~tid)]
    --[
    Start_HSS_Session(~idHN),
    Src(~R,AUTN),
    Honest(~supi),
    Honest(~idHN),
    Honest(idSN),
    Running(~idHN, ~supi,<'UE','HSS', <'K_seaf', K_seaf>>),
    Running(~idHN, ~supi,<'UE','HSS', <'snname', idSN>>),
    Running(~idHN, idSN,<'SEAF','HSS',<'K_seaf', K_seaf>>),
    Running(~idHN, idSN,<'SEAF','HSS',<'supi', ~supi>>)
    ]->
    [St_1_HSS(~tid,~idHN,~supi,idSN,SNID,~k,~R,~sk_HN,XRES_star,K_seaf,~cid),
    SndS(~cid,~idHN,idSN,<'aia',msgOut>)]


rule seaf_receive_aia_send_authReq:
let
    msgIn=<R,HNMAC,AUTN,HXRES_star>
    SNMAC=SHA256(<~N,HNMAC>,SNID)
    msgOut=<R,AUTN,SNMAC,SNID>
in
    [
    St_1_SEAF(~tid,~idSN,SNID,idHN,~N,~cid),
    RcvS(~cid,idHN,~idSN,<'aia',msgIn>)]
    --[
        Out_Src(R,AUTN),
        Running(~idSN, idHN, <'HSS','SEAF', <'AUTN', AUTN>>)
    ]->
    [St_2_SEAF(~tid,~idSN,SNID,idHN,~N,R,HXRES_star,~cid),
    Out(msgOut)] 

rule ue_receive_authReq_freshness_success_send_authResp:
let    
    AK=f5(~k,R)
    SNID=<'5G',idSN>
    HNMAC=AK XOR AUTN
    XSNMAC=SHA256(<~N,HNMAC>,SNID)
    XHNMAC=f1(~k,R)
    RES = f2(~k, R)
    IK = f4(~k, R)
    CK = f3(~k, R)
    RES_star = KDF(<CK, IK>, <SNID, RES, R>)
    K_seaf = KDF(KDF(<CK, IK>, <SNID, AK>), SNID)
    msgOut = RES_star
in
   [St_1_UE(~tid,~supi,~idHN,~k,~N),
    In(<R,AUTN,SNMAC,SNID>)
   ] 
   --[
   Eq(XSNMAC,SNMAC),
   Eq(XHNMAC,HNMAC),
   Running(~supi, ~idHN, <'HSS','UE', <'K_seaf', K_seaf>>),
   Running(~supi, ~idHN, <'HSS','UE', <'snname', idSN>>),
   Running(~supi, idSN,<'SEAF','UE',<'K_seaf', K_seaf>>),

   Commit(~supi,idSN,<'UE','SEAF',<'K_seaf',K_seaf>>),
   Commit(~supi,~idHN,<'UE','HSS',<'K_seaf',K_seaf>>),
   Commit(~supi,~idHN,<'UE','HSS',<'snname',idSN>>),
   Secret(<'UE', ~supi>, 'key', K_seaf),
   Secret(<'UE', ~supi>, 'supi', ~supi),
   Secret(<'UE', ~supi>, 'k', ~k),
   Honest(~supi),
   Honest(~idHN),
   Honest(idSN)	
   ]->
   [St_2_UE(~tid,~supi,~idHN,~k,~N,idSN,K_seaf),
    Out(msgOut)]
rule seaf_receive_authResp_send_ac:
let
   HXRES_star=SHA256(RES_star,R)
   msgOut=<RES_star,SNID>
in
   [St_2_SEAF(~tid,~idSN,SNID,idHN,~N,R,HXRES_star,~cid),
   In(RES_star)]
   -->
   [
   St_3_SEAF(~tid,~idSN,SNID,idHN,~N,R,RES_star,~cid),
   SndS(~cid,~idSN,idHN,<'ac',msgOut>)
   ]
rule hss_receive_ac_send_aca:
   let
   SNID=<'5G',idSN>
   msgOut=<'confirm',~supi,K_seaf>
   msgIn=<XRES_star,SNID>
   in
   [St_1_HSS(~tid,~idHN,~supi,idSN,SNID,~k,~R,~sk_HN,XRES_star,K_seaf,~cid),
   RcvS(~cid,idSN,~idHN,<'ac',msgIn>)]
   --[
    HSS_End(),
    Secret(<'HSS', ~idHN>, 'key', K_seaf),
    Secret(<'HSS', ~idHN>, 'supi', ~supi),
    Secret(<'HSS', ~idHN>, 'k', ~k),
    Honest(~idHN),
    Honest(~supi),
    Honest(idSN),
    Commit(~idHN, ~supi, <'HSS','UE', <'K_seaf', K_seaf>>),
    Commit(~idHN, ~supi, <'HSS','UE', <'snname', idSN>>),
    Commit(~idHN, idSN, <'HSS','SEAF', <'K_seaf', K_seaf>>),
    Commit(~idHN, idSN, <'HSS','SEAF', <'supi', ~supi>>)
	]->
   [SndS(~cid,~idHN,idSN,<'aca',msgOut>)]

rule seaf_receive_aca:
   let
   SNID=<'5G',~idSN>
   msgIn=<'confirm',supi,K_seaf> 
   in
   [St_3_SEAF(~tid,~idSN,SNID,idHN,~N,R,RES_star,~cid),
   RcvS(~cid,idHN,~idSN,<'aca',msgIn>)]
   --[
   SEAF_End(),
        Secret(<'SEAF', ~idSN>, 'key', K_seaf),
        Secret(<'SEAF', ~idSN>, 'supi', supi),
   Running(~idSN,supi,<'UE','SEAF',<'K_seaf',K_seaf>>),
   Running(~idSN, idHN,<'HSS','SEAF',<'supi', supi>>),

   Commit(~idSN, idHN, <'SEAF','HSS', <'K_seaf', K_seaf>>),
   Commit(~idSN, idHN, <'SEAF','HSS', <'supi', supi>>),
   Commit(~idSN, supi, <'SEAF','UE', <'K_seaf', K_seaf>>),
   	
   ]->
   [
    St_4_SEAF(~tid,~idSN,SNID,idHN,~N,R,RES_star,K_seaf,supi,~cid),
    Out(f1(K_seaf,'SEAF'))
   ]
rule ue_key_confirmation:
   [St_2_UE(~tid,~supi,~idHN,~k,~N,idSN,K_seaf),In(f1(K_seaf,'SEAF'))]
   --[
        CommitConf(~supi, idSN, <'UE','SEAF',<'K_seaf', K_seaf>>),
        Honest(~idHN),
        Honest(~supi),
        Honest(idSN)
   ]->
   [Out(f1(K_seaf,'UE'))]
rule seaf_key_confirmation_check:
   [St_4_SEAF(~tid,~idSN,SNID,idHN,~N,R,RES_star,K_seaf,supi,~cid),In(f1(K_seaf,'UE'))]
   --[]->
   []
/*************************************/
/*            Restrictions/Axioms    */
/************************************/
restriction subscribe_once:
  "All HN1 HN2 supi #i #j.Subscribe(supi,HN1)@i & Subscribe(supi,HN2)@j==>(#i=#j&HN1=HN2)"

  restriction Equality:
"All x y #i. Eq(x,y) @#i ==> x = y"

/*************************************/
/*             source lemma          */
/*************************************/
// proof (automatic) (~1 sec)
lemma autn_src [sources,heuristic={src_source}]:
    " All AUTN RAND #i. Out_Src(RAND,AUTN)@i
        ==> (Ex #j. Src(RAND,AUTN)@j & j < i)
             "
/**************************************/
/*        Executability lemmas        */
/**************************************/
// proof automatic
				      
lemma executability:
   	exists-trace
	" Ex #i. SEAF_End()@i
		& (All HN1 HN2 #j #k. HomeNet(HN1)@j &
				      HomeNet(HN2)@k ==> #j = #k)
		& (All S1 S2 HN1 HN2 #j #k. Subscribe(S1, HN1)@j &
					    Subscribe(S2, HN2)@k ==> #j = #k)
		& (All SNID1 SNID2 #j #k. Start_SEAF_Session(SNID1)@j &
				          Start_SEAF_Session(SNID2)@k ==> #j = #k) 
		& (All UE1 UE2 #j #k. Start_UE_Session(UE1)@j &
				          Start_UE_Session(UE2)@k ==> #j = #k) 
		& (All HN1 HN2 #j #k. Start_HSS_Session(HN1)@j &
				      Start_HSS_Session(HN2)@k ==> #j = #k)"
/**********************************/
/*       Authentication  lemmas   */
/*********************************/
     
/*********UE-SEAF**************/    
               
lemma weakagreement_ue_seaf[heuristic={weakagreement_ue_seaf_noRev}]:
    "
      All a b t #i. Commit(a,b,<'UE','SEAF',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)             
    "

 lemma weakagreement_ue_seaf_keyConf[heuristic={weakagreement_ue_seaf_noRev}]:
    "
      All a b t #i. CommitConf(a,b,<'UE','SEAF',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)             
    "   
 lemma injectiveagreement_ue_seaf_kseaf_keyConf[heuristic={weakagreement_ue_seaf_keyConf_noRev}]:
   " All a b t #i. CommitConf(a,b,<'UE','SEAF',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'UE','SEAF',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. CommitConf(a2,b2,<'UE','SEAF',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))                    
                            "    
    
/******************SEAF-UE************/
lemma injectiveagreement_seaf_ue_kseaf[heuristic={injectiveagreement_seaf_ue_kseaf}]:
   " All a b t #i. Commit(a,b,<'SEAF','UE',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'SEAF','UE',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. Commit(a2,b2,<'SEAF','UE',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))                    
                            "
lemma noninjectiveagreement_seaf_ue_kseaf[heuristic={noninjectiveagreement_weakagreement_seaf_ue}]:
     " All a b t #i. Commit(a,b,<'SEAF','UE',<'K_seaf', t>>)@i
            ==> (Ex #j. Running(b,a,<'SEAF','UE',<'K_seaf', t>>)@j)"                         
lemma weakagreement_seaf_ue[heuristic={noninjectiveagreement_weakagreement_seaf_ue}]:
    "
      All a b t #i. Commit(a,b,<'SEAF','UE',t>)@i
        ==> (Ex t2 #j. Running(b,a, t2)@j)             
    "  
/******************UE-HN************/
lemma injectiveagreement_ue_hss_kseaf[heuristic={injectiveagreement_ue_hss_kseaf}]:
   " All a b t #i. Commit(a,b,<'UE','HSS',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'UE','HSS',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. Commit(a2,b2,<'UE','HSS',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))
                    
     "
lemma noninjectiveagreement_ue_hss_SNID[heuristic={noninjectiveagreement_ue_hss}]:
" All a b t #i. Commit(a,b,<'UE','HSS',<'snname', t>>)@i
    		==> (Ex #j. Running(b,a,<'UE','HSS',<'snname', t>>)@j)
             	   "
lemma noninjectiveagreement_ue_hss_kseaf[heuristic={noninjectiveagreement_ue_hss}]:
" All a b t #i. Commit(a,b,<'UE','HSS',<'K_seaf', t>>)@i
                ==> (Ex #j. Running(b,a,<'UE','HSS',<'K_seaf', t>>)@j)
                   "
/******************HN-UE************/
lemma injectiveagreement_hss_ue_kseaf[heuristic={injectiveagreement_hss_ue_kseaf}]:
   " All a b t #i. Commit(a,b,<'HSS','UE',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'HSS','UE',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. Commit(a2,b2,<'HSS','UE',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))
                    
     "
lemma noninjectiveagreement_hss_ue_SNID[heuristic={noninjectiveagreement_hss_ue_SNID}]:
" All a b t #i. Commit(a,b,<'HSS','UE',<'snname', t>>)@i
            ==> (Ex #j. Running(b,a,<'HSS','UE',<'snname', t>>)@j)
                   "                   
/******************SN-HN****************/

lemma injectiveagreement_seaf_hss_kseaf:
   " All a b t #i. Commit(a,b,<'SEAF','HSS',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'SEAF','HSS',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. Commit(a2,b2,<'SEAF','HSS',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))
                    
     "
   
lemma weakagreement_seaf_hss:
    "
      All a b t #i. Commit(a,b,<'SEAF','HSS',t>)@i
		==> (Ex t2 #j. Running(b,a, t2)@j)
 
    "    
   
lemma noninjectiveagreement_seaf_hss_supi:
" All a b t #i. Commit(a,b,<'SEAF','HSS',<'supi', t>>)@i
    		==> (Ex #j. Running(b,a,<'SEAF','HSS',<'supi', t>>)@j)
             	   "
/******************HN-SN****************/
lemma injectiveagreement_hss_seaf_kseaf[heuristic={weakagreement_injectiveagreement_hss_seaf}]:
   " All a b t #i. Commit(a,b,<'HSS','SEAF',<'K_seaf', t>>)@i
        ==> (Ex #j. Running(b,a,<'HSS','SEAF',<'K_seaf', t>>)@j 
               & j < i
               & not (Ex a2 b2 #i2. Commit(a2,b2,<'HSS','SEAF',<'K_seaf', t>>)@i2
                            & not (#i2 = #i)))      
     "
lemma weakagreement_hss_seaf[heuristic={weakagreement_injectiveagreement_hss_seaf}]:
    "
      All a b t #i. Commit(a,b,<'HSS','SEAF',t>)@i
        ==> (Ex t2 #j. Running(b,a, t2)@j)
 
    "   
lemma noninjectiveagreement_hss_seaf_supi[heuristic={noninjectiveagreement_hss_seaf_supi}]:
" All a b t #i. Commit(a,b,<'HSS','SEAF',<'supi', t>>)@i
            ==> (Ex #j. Running(b,a,<'HSS','SEAF',<'supi', t>>)@j)
                   "
/******************Secret****************/     
lemma secrecy_seaf_kseaf[heuristic={secrecy_kseaf}]:
    " All idSN t #i. Secret(<'SEAF', idSN>, 'key', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_ue_kseaf[heuristic={secrecy_kseaf}]:
    " All supi t #i. Secret(<'UE', supi>, 'key', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_hss_kseaf:
    " All idHN t #i. Secret(<'HSS', idHN>, 'key', t)@i
        ==> not (Ex #j. K(t)@j)
    "

lemma secrecy_ue_k:
    " All supi t #i. Secret(<'UE', supi>, 'k', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_hss_k:
    " All idHN t #i. Secret(<'HSS', idHN>, 'k', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_seaf_supi:
    " All idSN t #i. Secret(<'SEAF', idSN>, 'supi', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_ue_supi:
    " All supi t #i. Secret(<'UE', supi>, 'supi', t)@i
        ==> not (Ex #j. K(t)@j)
    "
lemma secrecy_hss_supi:
    " All idHN t #i. Secret(<'HSS', idHN>, 'supi', t)@i
        ==> not (Ex #j. K(t)@j)
    "                            
end
